name: Solar system workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: unit testing
    strategy:
      matrix:
        nodejs_version: [18, 19, 20]
        operating_system: [ubuntu-latest, macos-latest]
        exclude:
          - nodejs_version: 18
            operating_system: macos-latest
          - nodejs_version: 19
            operating_system: macos-latest
          - nodejs_version: 20
            operating_system: macos-latest
          - nodejs_version: 19
            operating_system: ubuntu-latest
          - nodejs_version: 20
            operating_system: ubuntu-latest
    runs-on: ${{ matrix.operating_system }}
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    steps:

      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: cache npm dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}_node_modules_${{ hashFiles('package-lock.json') }}

      - name: install dependencies
        run: npm install

      - name: unit testing
        id: nodejs-unit-testing
        run: npm test

      - name: archive test result
        #if: failure() || steps.nodejs-unit-testing.outcome == 'failure' || steps.nodejs-unit-testing.outcome == 'success'
        # if: failure() || success()
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: mocha-test-result
          path: test-results.xml

  docker:
    name: containerization
    needs: unit-testing
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: dockerhub login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: ghcr login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: docker build for testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: docker image testing
        run: |
          docker images
          docker run --name solar-system -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            -e MONGO_USERNAME=$MONGO_USERNAME \
          ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{ range .NetworkSettings.Networks }}{{ .IPAddress }}{{ end }}' solar-system)
          echo $IP

          echo "Testing image url using wget"
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: push docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

  dev-deploy:
    name: deploy to dev kubernetes cluster
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: install kubectl cli
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.29.2'

      - name: set kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG  }}

      - name: fetch kubernetes cluster details
        run: |
          kubectl version --short
          echo ---------------------------------
          kubectl get nodes -o wide
